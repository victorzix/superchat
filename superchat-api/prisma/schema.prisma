// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  password       String
  name           String
  phone          String
  profilePicture String?
  status         String?
  privateKey     String?
  publicKey      String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  contacts       Contact[] @relation("UserContacts")
  inContancts    Contact[] @relation("UserAsContact")
  chats          Chat[]    @relation("ChatMembers")
}

model Contact {
  id         String   @id @default(uuid())
  name       String
  ownerId    String
  contactId  String
  phone      String
  isPinned   Boolean  @default(false)
  isSilenced Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  owner      User     @relation("UserContacts", fields: [ownerId], references: [id])
  contact    User     @relation("UserAsContact", fields: [contactId], references: [id])
}

model Chat {
  id        String    @id @default(uuid())
  isGroup   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   User[]    @relation("ChatMembers")
  ChatKeys  ChatKeys?
}

model ChatKeys {
  id     String @id @default(uuid())
  chatId String @unique
  keys   Bytes
  Chat   Chat   @relation(fields: [chatId], references: [id])
}
